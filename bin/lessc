#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/less'
require 'fssm'

PARSER = Less::Parser.new

if !ARGV[0] 
  puts "specify a LESS path to watch and a CSS path.  EX:  lessc this/less_directory:that/css_directory"
  exit 1
end

INPUT_DIR, T_OUTPUT_DIR = ARGV[0].split(':', 2)
OUTPUT_DIR = T_OUTPUT_DIR || INPUT_DIR

puts "monitoring #{File.expand_path(INPUT_DIR)} for changes to .less files (will output .css to #{File.expand_path(OUTPUT_DIR)})"

def compile_less(base,relative)
  
  begin
    input_path = File.join(base, relative)
    input_file = File.open(input_path,'r')
  
    output_path = File.join(OUTPUT_DIR, relative.gsub(/\.less$/, '.css'))
    `mkdir -p #{ output_path.gsub(/[^\/]+.css$/, '') }`    
    
    output_file = File.open(output_path,'w')
    
    less = input_file.read
    css = PARSER.parse(less).to_css(:compress => true)
    
    output_file.write("/* generated by less.rb */\n\n")
    output_file.write(css)
  rescue Less::ParseError => e
    
    puts "\n\n#{input_path}"
    puts "PARSE ERROR: #{e}\n\n"
    
    output_file.write("/* #{input_path}\n")
    output_file.write("   PARSE ERROR: #{e}       */")
  ensure
    input_file.close
    output_file.close
  end

end

FSSM.monitor do |mon|
  mon.path INPUT_DIR do |path|
    path.glob '**/*.less'

    path.update do |base, relative|
      puts "detected change: #{ base }/#{relative}"
      compile_less(base,relative)
    end

    path.create do |base, relative|
      puts "detected new file: #{ base }/#{relative}" 
      compile_less(base,relative)
    end
    
    path.delete do |base, relative|
      puts "detected deleted file: #{ base }/#{relative}" 
      
      css = File.join(OUTPUT_DIR, relative.gsub(/\.less$/, '.css'))
      File.delete css if File.exists?(css)
    end
  end
end